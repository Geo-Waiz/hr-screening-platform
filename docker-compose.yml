version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: hr-screening-postgres
    environment:
      POSTGRES_DB: hr_screening
      POSTGRES_USER: hruser
      POSTGRES_PASSWORD: Endemia24.,,.
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hr-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hruser -d hr_screening"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: hr-screening-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - hr-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Backend
  api:
    build:
      context: ./apps/api
      dockerfile: Dockerfile
    container_name: hr-screening-api
    environment:
      NODE_ENV: production
      PORT: 3000
      DATABASE_URL: postgresql://hruser:Endemia24.,,.@postgres:5432/hr_screening
      REDIS_URL: redis://redis:6379
      JWT_SECRET: ${JWT_SECRET:-hr-screening-prod-jwt-2024-change-this-to-strong-random-64-char-string}
      GROQ_API_KEY: ${GROQ_API_KEY}
    ports:
      - "3000:3000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - hr-network
    restart: unless-stopped

  # Frontend Application
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hr-screening-frontend
    environment:
      REACT_APP_API_URL: http://localhost:3000
    ports:
      - "80:80"
    depends_on:
      - api
    networks:
      - hr-network
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data:

networks:
  hr-network:
    driver: bridge
